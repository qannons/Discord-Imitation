// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class P_BaseMessage;
struct P_BaseMessageDefaultTypeInternal;
extern P_BaseMessageDefaultTypeInternal _P_BaseMessage_default_instance_;
class P_ChatMessage;
struct P_ChatMessageDefaultTypeInternal;
extern P_ChatMessageDefaultTypeInternal _P_ChatMessage_default_instance_;
class P_ChatRoom;
struct P_ChatRoomDefaultTypeInternal;
extern P_ChatRoomDefaultTypeInternal _P_ChatRoom_default_instance_;
class P_ImageMessage;
struct P_ImageMessageDefaultTypeInternal;
extern P_ImageMessageDefaultTypeInternal _P_ImageMessage_default_instance_;
class P_Sender;
struct P_SenderDefaultTypeInternal;
extern P_SenderDefaultTypeInternal _P_Sender_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::P_BaseMessage* Arena::CreateMaybeMessage<::Protocol::P_BaseMessage>(Arena*);
template<> ::Protocol::P_ChatMessage* Arena::CreateMaybeMessage<::Protocol::P_ChatMessage>(Arena*);
template<> ::Protocol::P_ChatRoom* Arena::CreateMaybeMessage<::Protocol::P_ChatRoom>(Arena*);
template<> ::Protocol::P_ImageMessage* Arena::CreateMaybeMessage<::Protocol::P_ImageMessage>(Arena*);
template<> ::Protocol::P_Sender* Arena::CreateMaybeMessage<::Protocol::P_Sender>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class P_ChatRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_ChatRoom) */ {
 public:
  inline P_ChatRoom() : P_ChatRoom(nullptr) {}
  ~P_ChatRoom() override;
  explicit PROTOBUF_CONSTEXPR P_ChatRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_ChatRoom(const P_ChatRoom& from);
  P_ChatRoom(P_ChatRoom&& from) noexcept
    : P_ChatRoom() {
    *this = ::std::move(from);
  }

  inline P_ChatRoom& operator=(const P_ChatRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_ChatRoom& operator=(P_ChatRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_ChatRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_ChatRoom* internal_default_instance() {
    return reinterpret_cast<const P_ChatRoom*>(
               &_P_ChatRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P_ChatRoom& a, P_ChatRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(P_ChatRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_ChatRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_ChatRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_ChatRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_ChatRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_ChatRoom& from) {
    P_ChatRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_ChatRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_ChatRoom";
  }
  protected:
  explicit P_ChatRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantsFieldNumber = 3,
    kRoomNameFieldNumber = 2,
    kRoomIDFieldNumber = 1,
  };
  // repeated string participants = 3;
  int participants_size() const;
  private:
  int _internal_participants_size() const;
  public:
  void clear_participants();
  const std::string& participants(int index) const;
  std::string* mutable_participants(int index);
  void set_participants(int index, const std::string& value);
  void set_participants(int index, std::string&& value);
  void set_participants(int index, const char* value);
  void set_participants(int index, const char* value, size_t size);
  std::string* add_participants();
  void add_participants(const std::string& value);
  void add_participants(std::string&& value);
  void add_participants(const char* value);
  void add_participants(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& participants() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_participants();
  private:
  const std::string& _internal_participants(int index) const;
  std::string* _internal_add_participants();
  public:

  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // uint32 roomID = 1;
  void clear_roomid();
  uint32_t roomid() const;
  void set_roomid(uint32_t value);
  private:
  uint32_t _internal_roomid() const;
  void _internal_set_roomid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P_ChatRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> participants_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
    uint32_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P_Sender final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_Sender) */ {
 public:
  inline P_Sender() : P_Sender(nullptr) {}
  ~P_Sender() override;
  explicit PROTOBUF_CONSTEXPR P_Sender(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_Sender(const P_Sender& from);
  P_Sender(P_Sender&& from) noexcept
    : P_Sender() {
    *this = ::std::move(from);
  }

  inline P_Sender& operator=(const P_Sender& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_Sender& operator=(P_Sender&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_Sender& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_Sender* internal_default_instance() {
    return reinterpret_cast<const P_Sender*>(
               &_P_Sender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P_Sender& a, P_Sender& b) {
    a.Swap(&b);
  }
  inline void Swap(P_Sender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_Sender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_Sender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_Sender>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_Sender& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_Sender& from) {
    P_Sender::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_Sender* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_Sender";
  }
  protected:
  explicit P_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kUserNameFieldNumber = 2,
  };
  // bytes userID = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string userName = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P_Sender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P_BaseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_BaseMessage) */ {
 public:
  inline P_BaseMessage() : P_BaseMessage(nullptr) {}
  ~P_BaseMessage() override;
  explicit PROTOBUF_CONSTEXPR P_BaseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_BaseMessage(const P_BaseMessage& from);
  P_BaseMessage(P_BaseMessage&& from) noexcept
    : P_BaseMessage() {
    *this = ::std::move(from);
  }

  inline P_BaseMessage& operator=(const P_BaseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_BaseMessage& operator=(P_BaseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_BaseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_BaseMessage* internal_default_instance() {
    return reinterpret_cast<const P_BaseMessage*>(
               &_P_BaseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(P_BaseMessage& a, P_BaseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(P_BaseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_BaseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_BaseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_BaseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_BaseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_BaseMessage& from) {
    P_BaseMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_BaseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_BaseMessage";
  }
  protected:
  explicit P_BaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kSenderFieldNumber = 3,
    kMessageIDFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // string roomID = 2;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .Protocol.P_Sender sender = 3;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::Protocol::P_Sender& sender() const;
  PROTOBUF_NODISCARD ::Protocol::P_Sender* release_sender();
  ::Protocol::P_Sender* mutable_sender();
  void set_allocated_sender(::Protocol::P_Sender* sender);
  private:
  const ::Protocol::P_Sender& _internal_sender() const;
  ::Protocol::P_Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::Protocol::P_Sender* sender);
  ::Protocol::P_Sender* unsafe_arena_release_sender();

  // int64 messageID = 1;
  void clear_messageid();
  int64_t messageid() const;
  void set_messageid(int64_t value);
  private:
  int64_t _internal_messageid() const;
  void _internal_set_messageid(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P_BaseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
    ::Protocol::P_Sender* sender_;
    int64_t messageid_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P_ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_ChatMessage) */ {
 public:
  inline P_ChatMessage() : P_ChatMessage(nullptr) {}
  ~P_ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR P_ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_ChatMessage(const P_ChatMessage& from);
  P_ChatMessage(P_ChatMessage&& from) noexcept
    : P_ChatMessage() {
    *this = ::std::move(from);
  }

  inline P_ChatMessage& operator=(const P_ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_ChatMessage& operator=(P_ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_ChatMessage* internal_default_instance() {
    return reinterpret_cast<const P_ChatMessage*>(
               &_P_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(P_ChatMessage& a, P_ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(P_ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_ChatMessage& from) {
    P_ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_ChatMessage";
  }
  protected:
  explicit P_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .Protocol.P_BaseMessage base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Protocol::P_BaseMessage& base() const;
  PROTOBUF_NODISCARD ::Protocol::P_BaseMessage* release_base();
  ::Protocol::P_BaseMessage* mutable_base();
  void set_allocated_base(::Protocol::P_BaseMessage* base);
  private:
  const ::Protocol::P_BaseMessage& _internal_base() const;
  ::Protocol::P_BaseMessage* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Protocol::P_BaseMessage* base);
  ::Protocol::P_BaseMessage* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:Protocol.P_ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::Protocol::P_BaseMessage* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P_ImageMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_ImageMessage) */ {
 public:
  inline P_ImageMessage() : P_ImageMessage(nullptr) {}
  ~P_ImageMessage() override;
  explicit PROTOBUF_CONSTEXPR P_ImageMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_ImageMessage(const P_ImageMessage& from);
  P_ImageMessage(P_ImageMessage&& from) noexcept
    : P_ImageMessage() {
    *this = ::std::move(from);
  }

  inline P_ImageMessage& operator=(const P_ImageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_ImageMessage& operator=(P_ImageMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_ImageMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_ImageMessage* internal_default_instance() {
    return reinterpret_cast<const P_ImageMessage*>(
               &_P_ImageMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(P_ImageMessage& a, P_ImageMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(P_ImageMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_ImageMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_ImageMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_ImageMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_ImageMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_ImageMessage& from) {
    P_ImageMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_ImageMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_ImageMessage";
  }
  protected:
  explicit P_ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .Protocol.P_BaseMessage base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::Protocol::P_BaseMessage& base() const;
  PROTOBUF_NODISCARD ::Protocol::P_BaseMessage* release_base();
  ::Protocol::P_BaseMessage* mutable_base();
  void set_allocated_base(::Protocol::P_BaseMessage* base);
  private:
  const ::Protocol::P_BaseMessage& _internal_base() const;
  ::Protocol::P_BaseMessage* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::Protocol::P_BaseMessage* base);
  ::Protocol::P_BaseMessage* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:Protocol.P_ImageMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::Protocol::P_BaseMessage* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P_ChatRoom

// uint32 roomID = 1;
inline void P_ChatRoom::clear_roomid() {
  _impl_.roomid_ = 0u;
}
inline uint32_t P_ChatRoom::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint32_t P_ChatRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatRoom.roomID)
  return _internal_roomid();
}
inline void P_ChatRoom::_internal_set_roomid(uint32_t value) {
  
  _impl_.roomid_ = value;
}
inline void P_ChatRoom::set_roomid(uint32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.roomID)
}

// string roomName = 2;
inline void P_ChatRoom::clear_roomname() {
  _impl_.roomname_.ClearToEmpty();
}
inline const std::string& P_ChatRoom::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatRoom.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_ChatRoom::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.roomName)
}
inline std::string* P_ChatRoom::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.P_ChatRoom.roomName)
  return _s;
}
inline const std::string& P_ChatRoom::_internal_roomname() const {
  return _impl_.roomname_.Get();
}
inline void P_ChatRoom::_internal_set_roomname(const std::string& value) {
  
  _impl_.roomname_.Set(value, GetArenaForAllocation());
}
inline std::string* P_ChatRoom::_internal_mutable_roomname() {
  
  return _impl_.roomname_.Mutable(GetArenaForAllocation());
}
inline std::string* P_ChatRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.P_ChatRoom.roomName)
  return _impl_.roomname_.Release();
}
inline void P_ChatRoom::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  _impl_.roomname_.SetAllocated(roomname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomname_.IsDefault()) {
    _impl_.roomname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_ChatRoom.roomName)
}

// repeated string participants = 3;
inline int P_ChatRoom::_internal_participants_size() const {
  return _impl_.participants_.size();
}
inline int P_ChatRoom::participants_size() const {
  return _internal_participants_size();
}
inline void P_ChatRoom::clear_participants() {
  _impl_.participants_.Clear();
}
inline std::string* P_ChatRoom::add_participants() {
  std::string* _s = _internal_add_participants();
  // @@protoc_insertion_point(field_add_mutable:Protocol.P_ChatRoom.participants)
  return _s;
}
inline const std::string& P_ChatRoom::_internal_participants(int index) const {
  return _impl_.participants_.Get(index);
}
inline const std::string& P_ChatRoom::participants(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatRoom.participants)
  return _internal_participants(index);
}
inline std::string* P_ChatRoom::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.P_ChatRoom.participants)
  return _impl_.participants_.Mutable(index);
}
inline void P_ChatRoom::set_participants(int index, const std::string& value) {
  _impl_.participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::set_participants(int index, std::string&& value) {
  _impl_.participants_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::set_participants(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::set_participants(int index, const char* value, size_t size) {
  _impl_.participants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.P_ChatRoom.participants)
}
inline std::string* P_ChatRoom::_internal_add_participants() {
  return _impl_.participants_.Add();
}
inline void P_ChatRoom::add_participants(const std::string& value) {
  _impl_.participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::add_participants(std::string&& value) {
  _impl_.participants_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::add_participants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::add_participants(const char* value, size_t size) {
  _impl_.participants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.P_ChatRoom.participants)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P_ChatRoom::participants() const {
  // @@protoc_insertion_point(field_list:Protocol.P_ChatRoom.participants)
  return _impl_.participants_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P_ChatRoom::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.P_ChatRoom.participants)
  return &_impl_.participants_;
}

// -------------------------------------------------------------------

// P_Sender

// bytes userID = 1;
inline void P_Sender::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& P_Sender::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_Sender.userID)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_Sender::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_Sender.userID)
}
inline std::string* P_Sender::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Protocol.P_Sender.userID)
  return _s;
}
inline const std::string& P_Sender::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void P_Sender::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* P_Sender::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* P_Sender::release_userid() {
  // @@protoc_insertion_point(field_release:Protocol.P_Sender.userID)
  return _impl_.userid_.Release();
}
inline void P_Sender::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_Sender.userID)
}

// string userName = 2;
inline void P_Sender::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& P_Sender::username() const {
  // @@protoc_insertion_point(field_get:Protocol.P_Sender.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_Sender::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_Sender.userName)
}
inline std::string* P_Sender::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.P_Sender.userName)
  return _s;
}
inline const std::string& P_Sender::_internal_username() const {
  return _impl_.username_.Get();
}
inline void P_Sender::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* P_Sender::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* P_Sender::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.P_Sender.userName)
  return _impl_.username_.Release();
}
inline void P_Sender::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_Sender.userName)
}

// -------------------------------------------------------------------

// P_BaseMessage

// int64 messageID = 1;
inline void P_BaseMessage::clear_messageid() {
  _impl_.messageid_ = int64_t{0};
}
inline int64_t P_BaseMessage::_internal_messageid() const {
  return _impl_.messageid_;
}
inline int64_t P_BaseMessage::messageid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_BaseMessage.messageID)
  return _internal_messageid();
}
inline void P_BaseMessage::_internal_set_messageid(int64_t value) {
  
  _impl_.messageid_ = value;
}
inline void P_BaseMessage::set_messageid(int64_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:Protocol.P_BaseMessage.messageID)
}

// string roomID = 2;
inline void P_BaseMessage::clear_roomid() {
  _impl_.roomid_.ClearToEmpty();
}
inline const std::string& P_BaseMessage::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_BaseMessage.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_BaseMessage::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_BaseMessage.roomID)
}
inline std::string* P_BaseMessage::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:Protocol.P_BaseMessage.roomID)
  return _s;
}
inline const std::string& P_BaseMessage::_internal_roomid() const {
  return _impl_.roomid_.Get();
}
inline void P_BaseMessage::_internal_set_roomid(const std::string& value) {
  
  _impl_.roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* P_BaseMessage::_internal_mutable_roomid() {
  
  return _impl_.roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* P_BaseMessage::release_roomid() {
  // @@protoc_insertion_point(field_release:Protocol.P_BaseMessage.roomID)
  return _impl_.roomid_.Release();
}
inline void P_BaseMessage::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  _impl_.roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomid_.IsDefault()) {
    _impl_.roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_BaseMessage.roomID)
}

// .Protocol.P_Sender sender = 3;
inline bool P_BaseMessage::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool P_BaseMessage::has_sender() const {
  return _internal_has_sender();
}
inline void P_BaseMessage::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::Protocol::P_Sender& P_BaseMessage::_internal_sender() const {
  const ::Protocol::P_Sender* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::P_Sender&>(
      ::Protocol::_P_Sender_default_instance_);
}
inline const ::Protocol::P_Sender& P_BaseMessage::sender() const {
  // @@protoc_insertion_point(field_get:Protocol.P_BaseMessage.sender)
  return _internal_sender();
}
inline void P_BaseMessage::unsafe_arena_set_allocated_sender(
    ::Protocol::P_Sender* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P_BaseMessage.sender)
}
inline ::Protocol::P_Sender* P_BaseMessage::release_sender() {
  
  ::Protocol::P_Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::P_Sender* P_BaseMessage::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:Protocol.P_BaseMessage.sender)
  
  ::Protocol::P_Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::Protocol::P_Sender* P_BaseMessage::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::P_Sender>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::Protocol::P_Sender* P_BaseMessage::mutable_sender() {
  ::Protocol::P_Sender* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:Protocol.P_BaseMessage.sender)
  return _msg;
}
inline void P_BaseMessage::set_allocated_sender(::Protocol::P_Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_BaseMessage.sender)
}

// int64 timestamp = 4;
inline void P_BaseMessage::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t P_BaseMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t P_BaseMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.P_BaseMessage.timestamp)
  return _internal_timestamp();
}
inline void P_BaseMessage::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void P_BaseMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.P_BaseMessage.timestamp)
}

// -------------------------------------------------------------------

// P_ChatMessage

// .Protocol.P_BaseMessage base = 1;
inline bool P_ChatMessage::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool P_ChatMessage::has_base() const {
  return _internal_has_base();
}
inline void P_ChatMessage::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Protocol::P_BaseMessage& P_ChatMessage::_internal_base() const {
  const ::Protocol::P_BaseMessage* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::P_BaseMessage&>(
      ::Protocol::_P_BaseMessage_default_instance_);
}
inline const ::Protocol::P_BaseMessage& P_ChatMessage::base() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatMessage.base)
  return _internal_base();
}
inline void P_ChatMessage::unsafe_arena_set_allocated_base(
    ::Protocol::P_BaseMessage* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P_ChatMessage.base)
}
inline ::Protocol::P_BaseMessage* P_ChatMessage::release_base() {
  
  ::Protocol::P_BaseMessage* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::P_BaseMessage* P_ChatMessage::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Protocol.P_ChatMessage.base)
  
  ::Protocol::P_BaseMessage* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Protocol::P_BaseMessage* P_ChatMessage::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::P_BaseMessage>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Protocol::P_BaseMessage* P_ChatMessage::mutable_base() {
  ::Protocol::P_BaseMessage* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Protocol.P_ChatMessage.base)
  return _msg;
}
inline void P_ChatMessage::set_allocated_base(::Protocol::P_BaseMessage* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_ChatMessage.base)
}

// string content = 2;
inline void P_ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& P_ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_ChatMessage.content)
}
inline std::string* P_ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Protocol.P_ChatMessage.content)
  return _s;
}
inline const std::string& P_ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void P_ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* P_ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* P_ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.P_ChatMessage.content)
  return _impl_.content_.Release();
}
inline void P_ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_ChatMessage.content)
}

// -------------------------------------------------------------------

// P_ImageMessage

// .Protocol.P_BaseMessage base = 1;
inline bool P_ImageMessage::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool P_ImageMessage::has_base() const {
  return _internal_has_base();
}
inline void P_ImageMessage::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::Protocol::P_BaseMessage& P_ImageMessage::_internal_base() const {
  const ::Protocol::P_BaseMessage* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::P_BaseMessage&>(
      ::Protocol::_P_BaseMessage_default_instance_);
}
inline const ::Protocol::P_BaseMessage& P_ImageMessage::base() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ImageMessage.base)
  return _internal_base();
}
inline void P_ImageMessage::unsafe_arena_set_allocated_base(
    ::Protocol::P_BaseMessage* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.P_ImageMessage.base)
}
inline ::Protocol::P_BaseMessage* P_ImageMessage::release_base() {
  
  ::Protocol::P_BaseMessage* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::P_BaseMessage* P_ImageMessage::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:Protocol.P_ImageMessage.base)
  
  ::Protocol::P_BaseMessage* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::Protocol::P_BaseMessage* P_ImageMessage::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::P_BaseMessage>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::Protocol::P_BaseMessage* P_ImageMessage::mutable_base() {
  ::Protocol::P_BaseMessage* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:Protocol.P_ImageMessage.base)
  return _msg;
}
inline void P_ImageMessage::set_allocated_base(::Protocol::P_BaseMessage* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_ImageMessage.base)
}

// bytes content = 2;
inline void P_ImageMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& P_ImageMessage::content() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ImageMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_ImageMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_ImageMessage.content)
}
inline std::string* P_ImageMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Protocol.P_ImageMessage.content)
  return _s;
}
inline const std::string& P_ImageMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void P_ImageMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* P_ImageMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* P_ImageMessage::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.P_ImageMessage.content)
  return _impl_.content_.Release();
}
inline void P_ImageMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_ImageMessage.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
