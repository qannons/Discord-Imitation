// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class P_ChatRoom;
struct P_ChatRoomDefaultTypeInternal;
extern P_ChatRoomDefaultTypeInternal _P_ChatRoom_default_instance_;
class P_PacketHeader;
struct P_PacketHeaderDefaultTypeInternal;
extern P_PacketHeaderDefaultTypeInternal _P_PacketHeader_default_instance_;
class P_Sender;
struct P_SenderDefaultTypeInternal;
extern P_SenderDefaultTypeInternal _P_Sender_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ChatMessage* Arena::CreateMaybeMessage<::Protocol::ChatMessage>(Arena*);
template<> ::Protocol::P_ChatRoom* Arena::CreateMaybeMessage<::Protocol::P_ChatRoom>(Arena*);
template<> ::Protocol::P_PacketHeader* Arena::CreateMaybeMessage<::Protocol::P_PacketHeader>(Arena*);
template<> ::Protocol::P_Sender* Arena::CreateMaybeMessage<::Protocol::P_Sender>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum EP_MessageType : int {
  TEXT = 0,
  IMAGE = 1,
  EMOJI = 2,
  EP_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EP_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EP_MessageType_IsValid(int value);
constexpr EP_MessageType EP_MessageType_MIN = TEXT;
constexpr EP_MessageType EP_MessageType_MAX = EMOJI;
constexpr int EP_MessageType_ARRAYSIZE = EP_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EP_MessageType_descriptor();
template<typename T>
inline const std::string& EP_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EP_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EP_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EP_MessageType_descriptor(), enum_t_value);
}
inline bool EP_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EP_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EP_MessageType>(
    EP_MessageType_descriptor(), name, value);
}
// ===================================================================

class P_PacketHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_PacketHeader) */ {
 public:
  inline P_PacketHeader() : P_PacketHeader(nullptr) {}
  ~P_PacketHeader() override;
  explicit PROTOBUF_CONSTEXPR P_PacketHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_PacketHeader(const P_PacketHeader& from);
  P_PacketHeader(P_PacketHeader&& from) noexcept
    : P_PacketHeader() {
    *this = ::std::move(from);
  }

  inline P_PacketHeader& operator=(const P_PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_PacketHeader& operator=(P_PacketHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_PacketHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_PacketHeader* internal_default_instance() {
    return reinterpret_cast<const P_PacketHeader*>(
               &_P_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P_PacketHeader& a, P_PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(P_PacketHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_PacketHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_PacketHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_PacketHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_PacketHeader& from) {
    P_PacketHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_PacketHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_PacketHeader";
  }
  protected:
  explicit P_PacketHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint32 packetId = 1;
  void clear_packetid();
  uint32_t packetid() const;
  void set_packetid(uint32_t value);
  private:
  uint32_t _internal_packetid() const;
  void _internal_set_packetid(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P_PacketHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t packetid_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P_ChatRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_ChatRoom) */ {
 public:
  inline P_ChatRoom() : P_ChatRoom(nullptr) {}
  ~P_ChatRoom() override;
  explicit PROTOBUF_CONSTEXPR P_ChatRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_ChatRoom(const P_ChatRoom& from);
  P_ChatRoom(P_ChatRoom&& from) noexcept
    : P_ChatRoom() {
    *this = ::std::move(from);
  }

  inline P_ChatRoom& operator=(const P_ChatRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_ChatRoom& operator=(P_ChatRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_ChatRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_ChatRoom* internal_default_instance() {
    return reinterpret_cast<const P_ChatRoom*>(
               &_P_ChatRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P_ChatRoom& a, P_ChatRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(P_ChatRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_ChatRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_ChatRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_ChatRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_ChatRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_ChatRoom& from) {
    P_ChatRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_ChatRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_ChatRoom";
  }
  protected:
  explicit P_ChatRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantsFieldNumber = 3,
    kRoomNameFieldNumber = 2,
    kRoomIDFieldNumber = 1,
  };
  // repeated string participants = 3;
  int participants_size() const;
  private:
  int _internal_participants_size() const;
  public:
  void clear_participants();
  const std::string& participants(int index) const;
  std::string* mutable_participants(int index);
  void set_participants(int index, const std::string& value);
  void set_participants(int index, std::string&& value);
  void set_participants(int index, const char* value);
  void set_participants(int index, const char* value, size_t size);
  std::string* add_participants();
  void add_participants(const std::string& value);
  void add_participants(std::string&& value);
  void add_participants(const char* value);
  void add_participants(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& participants() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_participants();
  private:
  const std::string& _internal_participants(int index) const;
  std::string* _internal_add_participants();
  public:

  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // uint32 roomID = 1;
  void clear_roomid();
  uint32_t roomid() const;
  void set_roomid(uint32_t value);
  private:
  uint32_t _internal_roomid() const;
  void _internal_set_roomid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P_ChatRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> participants_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
    uint32_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class P_Sender final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.P_Sender) */ {
 public:
  inline P_Sender() : P_Sender(nullptr) {}
  ~P_Sender() override;
  explicit PROTOBUF_CONSTEXPR P_Sender(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P_Sender(const P_Sender& from);
  P_Sender(P_Sender&& from) noexcept
    : P_Sender() {
    *this = ::std::move(from);
  }

  inline P_Sender& operator=(const P_Sender& from) {
    CopyFrom(from);
    return *this;
  }
  inline P_Sender& operator=(P_Sender&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const P_Sender& default_instance() {
    return *internal_default_instance();
  }
  static inline const P_Sender* internal_default_instance() {
    return reinterpret_cast<const P_Sender*>(
               &_P_Sender_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(P_Sender& a, P_Sender& b) {
    a.Swap(&b);
  }
  inline void Swap(P_Sender* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P_Sender* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  P_Sender* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<P_Sender>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const P_Sender& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const P_Sender& from) {
    P_Sender::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P_Sender* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.P_Sender";
  }
  protected:
  explicit P_Sender(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint64 userID = 1;
  void clear_userid();
  uint64_t userid() const;
  void set_userid(uint64_t value);
  private:
  uint64_t _internal_userid() const;
  void _internal_set_userid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.P_Sender)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    uint64_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kRoomIDFieldNumber = 5,
    kSenderFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string roomID = 5;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .Protocol.P_Sender sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::Protocol::P_Sender& sender() const;
  PROTOBUF_NODISCARD ::Protocol::P_Sender* release_sender();
  ::Protocol::P_Sender* mutable_sender();
  void set_allocated_sender(::Protocol::P_Sender* sender);
  private:
  const ::Protocol::P_Sender& _internal_sender() const;
  ::Protocol::P_Sender* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::Protocol::P_Sender* sender);
  ::Protocol::P_Sender* unsafe_arena_release_sender();

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.EP_MessageType type = 4;
  void clear_type();
  ::Protocol::EP_MessageType type() const;
  void set_type(::Protocol::EP_MessageType value);
  private:
  ::Protocol::EP_MessageType _internal_type() const;
  void _internal_set_type(::Protocol::EP_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
    ::Protocol::P_Sender* sender_;
    int64_t timestamp_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P_PacketHeader

// uint32 packetId = 1;
inline void P_PacketHeader::clear_packetid() {
  _impl_.packetid_ = 0u;
}
inline uint32_t P_PacketHeader::_internal_packetid() const {
  return _impl_.packetid_;
}
inline uint32_t P_PacketHeader::packetid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_PacketHeader.packetId)
  return _internal_packetid();
}
inline void P_PacketHeader::_internal_set_packetid(uint32_t value) {
  
  _impl_.packetid_ = value;
}
inline void P_PacketHeader::set_packetid(uint32_t value) {
  _internal_set_packetid(value);
  // @@protoc_insertion_point(field_set:Protocol.P_PacketHeader.packetId)
}

// uint32 size = 2;
inline void P_PacketHeader::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t P_PacketHeader::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t P_PacketHeader::size() const {
  // @@protoc_insertion_point(field_get:Protocol.P_PacketHeader.size)
  return _internal_size();
}
inline void P_PacketHeader::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void P_PacketHeader::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Protocol.P_PacketHeader.size)
}

// -------------------------------------------------------------------

// P_ChatRoom

// uint32 roomID = 1;
inline void P_ChatRoom::clear_roomid() {
  _impl_.roomid_ = 0u;
}
inline uint32_t P_ChatRoom::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint32_t P_ChatRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatRoom.roomID)
  return _internal_roomid();
}
inline void P_ChatRoom::_internal_set_roomid(uint32_t value) {
  
  _impl_.roomid_ = value;
}
inline void P_ChatRoom::set_roomid(uint32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.roomID)
}

// string roomName = 2;
inline void P_ChatRoom::clear_roomname() {
  _impl_.roomname_.ClearToEmpty();
}
inline const std::string& P_ChatRoom::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatRoom.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_ChatRoom::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.roomName)
}
inline std::string* P_ChatRoom::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.P_ChatRoom.roomName)
  return _s;
}
inline const std::string& P_ChatRoom::_internal_roomname() const {
  return _impl_.roomname_.Get();
}
inline void P_ChatRoom::_internal_set_roomname(const std::string& value) {
  
  _impl_.roomname_.Set(value, GetArenaForAllocation());
}
inline std::string* P_ChatRoom::_internal_mutable_roomname() {
  
  return _impl_.roomname_.Mutable(GetArenaForAllocation());
}
inline std::string* P_ChatRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.P_ChatRoom.roomName)
  return _impl_.roomname_.Release();
}
inline void P_ChatRoom::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  _impl_.roomname_.SetAllocated(roomname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomname_.IsDefault()) {
    _impl_.roomname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_ChatRoom.roomName)
}

// repeated string participants = 3;
inline int P_ChatRoom::_internal_participants_size() const {
  return _impl_.participants_.size();
}
inline int P_ChatRoom::participants_size() const {
  return _internal_participants_size();
}
inline void P_ChatRoom::clear_participants() {
  _impl_.participants_.Clear();
}
inline std::string* P_ChatRoom::add_participants() {
  std::string* _s = _internal_add_participants();
  // @@protoc_insertion_point(field_add_mutable:Protocol.P_ChatRoom.participants)
  return _s;
}
inline const std::string& P_ChatRoom::_internal_participants(int index) const {
  return _impl_.participants_.Get(index);
}
inline const std::string& P_ChatRoom::participants(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.P_ChatRoom.participants)
  return _internal_participants(index);
}
inline std::string* P_ChatRoom::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.P_ChatRoom.participants)
  return _impl_.participants_.Mutable(index);
}
inline void P_ChatRoom::set_participants(int index, const std::string& value) {
  _impl_.participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::set_participants(int index, std::string&& value) {
  _impl_.participants_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::set_participants(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.participants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::set_participants(int index, const char* value, size_t size) {
  _impl_.participants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.P_ChatRoom.participants)
}
inline std::string* P_ChatRoom::_internal_add_participants() {
  return _impl_.participants_.Add();
}
inline void P_ChatRoom::add_participants(const std::string& value) {
  _impl_.participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::add_participants(std::string&& value) {
  _impl_.participants_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::add_participants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.participants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.P_ChatRoom.participants)
}
inline void P_ChatRoom::add_participants(const char* value, size_t size) {
  _impl_.participants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.P_ChatRoom.participants)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
P_ChatRoom::participants() const {
  // @@protoc_insertion_point(field_list:Protocol.P_ChatRoom.participants)
  return _impl_.participants_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
P_ChatRoom::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.P_ChatRoom.participants)
  return &_impl_.participants_;
}

// -------------------------------------------------------------------

// P_Sender

// uint64 userID = 1;
inline void P_Sender::clear_userid() {
  _impl_.userid_ = uint64_t{0u};
}
inline uint64_t P_Sender::_internal_userid() const {
  return _impl_.userid_;
}
inline uint64_t P_Sender::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.P_Sender.userID)
  return _internal_userid();
}
inline void P_Sender::_internal_set_userid(uint64_t value) {
  
  _impl_.userid_ = value;
}
inline void P_Sender::set_userid(uint64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Protocol.P_Sender.userID)
}

// string username = 2;
inline void P_Sender::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& P_Sender::username() const {
  // @@protoc_insertion_point(field_get:Protocol.P_Sender.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void P_Sender::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.P_Sender.username)
}
inline std::string* P_Sender::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.P_Sender.username)
  return _s;
}
inline const std::string& P_Sender::_internal_username() const {
  return _impl_.username_.Get();
}
inline void P_Sender::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* P_Sender::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* P_Sender::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.P_Sender.username)
  return _impl_.username_.Release();
}
inline void P_Sender::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.P_Sender.username)
}

// -------------------------------------------------------------------

// ChatMessage

// .Protocol.P_Sender sender = 1;
inline bool ChatMessage::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool ChatMessage::has_sender() const {
  return _internal_has_sender();
}
inline void ChatMessage::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::Protocol::P_Sender& ChatMessage::_internal_sender() const {
  const ::Protocol::P_Sender* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::P_Sender&>(
      ::Protocol::_P_Sender_default_instance_);
}
inline const ::Protocol::P_Sender& ChatMessage::sender() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatMessage.sender)
  return _internal_sender();
}
inline void ChatMessage::unsafe_arena_set_allocated_sender(
    ::Protocol::P_Sender* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ChatMessage.sender)
}
inline ::Protocol::P_Sender* ChatMessage::release_sender() {
  
  ::Protocol::P_Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::P_Sender* ChatMessage::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:Protocol.ChatMessage.sender)
  
  ::Protocol::P_Sender* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::Protocol::P_Sender* ChatMessage::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::P_Sender>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::Protocol::P_Sender* ChatMessage::mutable_sender() {
  ::Protocol::P_Sender* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:Protocol.ChatMessage.sender)
  return _msg;
}
inline void ChatMessage::set_allocated_sender(::Protocol::P_Sender* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ChatMessage.sender)
}

// string content = 2;
inline void ChatMessage::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatMessage.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Protocol.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ChatMessage.content)
}

// int64 timestamp = 3;
inline void ChatMessage::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ChatMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.ChatMessage.timestamp)
}

// .Protocol.EP_MessageType type = 4;
inline void ChatMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::EP_MessageType ChatMessage::_internal_type() const {
  return static_cast< ::Protocol::EP_MessageType >(_impl_.type_);
}
inline ::Protocol::EP_MessageType ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatMessage.type)
  return _internal_type();
}
inline void ChatMessage::_internal_set_type(::Protocol::EP_MessageType value) {
  
  _impl_.type_ = value;
}
inline void ChatMessage::set_type(::Protocol::EP_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ChatMessage.type)
}

// string roomID = 5;
inline void ChatMessage::clear_roomid() {
  _impl_.roomid_.ClearToEmpty();
}
inline const std::string& ChatMessage::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.ChatMessage.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ChatMessage.roomID)
}
inline std::string* ChatMessage::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:Protocol.ChatMessage.roomID)
  return _s;
}
inline const std::string& ChatMessage::_internal_roomid() const {
  return _impl_.roomid_.Get();
}
inline void ChatMessage::_internal_set_roomid(const std::string& value) {
  
  _impl_.roomid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_roomid() {
  
  return _impl_.roomid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_roomid() {
  // @@protoc_insertion_point(field_release:Protocol.ChatMessage.roomID)
  return _impl_.roomid_.Release();
}
inline void ChatMessage::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  _impl_.roomid_.SetAllocated(roomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomid_.IsDefault()) {
    _impl_.roomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ChatMessage.roomID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::EP_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EP_MessageType>() {
  return ::Protocol::EP_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
